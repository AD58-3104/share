// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: infoshare.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_infoshare_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_infoshare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_infoshare_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_infoshare_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_infoshare_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_infoshare_2eproto_metadata_getter(int index);
namespace CitbrainsMessage {
class Object;
struct ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class SharingData;
struct SharingDataDefaultTypeInternal;
extern SharingDataDefaultTypeInternal _SharingData_default_instance_;
}  // namespace CitbrainsMessage
PROTOBUF_NAMESPACE_OPEN
template<> ::CitbrainsMessage::Object* Arena::CreateMaybeMessage<::CitbrainsMessage::Object>(Arena*);
template<> ::CitbrainsMessage::SharingData* Arena::CreateMaybeMessage<::CitbrainsMessage::SharingData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CitbrainsMessage {

// ===================================================================

class Object PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CitbrainsMessage.Object) */ {
 public:
  inline Object() : Object(nullptr) {}
  virtual ~Object();
  explicit constexpr Object(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Object(const Object& from);
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  inline Object& operator=(Object&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Object& default_instance() {
    return *internal_default_instance();
  }
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }
  inline void Swap(Object* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Object* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CitbrainsMessage.Object";
  }
  protected:
  explicit Object(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_infoshare_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotSideFieldNumber = 1,
    kFlagsFieldNumber = 5,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kPosThFieldNumber = 4,
  };
  // optional bytes robot_side = 1;
  bool has_robot_side() const;
  private:
  bool _internal_has_robot_side() const;
  public:
  void clear_robot_side();
  const std::string& robot_side() const;
  void set_robot_side(const std::string& value);
  void set_robot_side(std::string&& value);
  void set_robot_side(const char* value);
  void set_robot_side(const void* value, size_t size);
  std::string* mutable_robot_side();
  std::string* release_robot_side();
  void set_allocated_robot_side(std::string* robot_side);
  private:
  const std::string& _internal_robot_side() const;
  void _internal_set_robot_side(const std::string& value);
  std::string* _internal_mutable_robot_side();
  public:

  // optional bytes flags = 5;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  const std::string& flags() const;
  void set_flags(const std::string& value);
  void set_flags(std::string&& value);
  void set_flags(const char* value);
  void set_flags(const void* value, size_t size);
  std::string* mutable_flags();
  std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // optional sint32 pos_x = 2;
  bool has_pos_x() const;
  private:
  bool _internal_has_pos_x() const;
  public:
  void clear_pos_x();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_x() const;
  void set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_x() const;
  void _internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 pos_y = 3;
  bool has_pos_y() const;
  private:
  bool _internal_has_pos_y() const;
  public:
  void clear_pos_y();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_y() const;
  void set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_y() const;
  void _internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 pos_th = 4;
  bool has_pos_th() const;
  private:
  bool _internal_has_pos_th() const;
  public:
  void clear_pos_th();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_th() const;
  void set_pos_th(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_th() const;
  void _internal_set_pos_th(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CitbrainsMessage.Object)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_th_;
  friend struct ::TableStruct_infoshare_2eproto;
};
// -------------------------------------------------------------------

class SharingData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CitbrainsMessage.SharingData) */ {
 public:
  inline SharingData() : SharingData(nullptr) {}
  virtual ~SharingData();
  explicit constexpr SharingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SharingData(const SharingData& from);
  SharingData(SharingData&& from) noexcept
    : SharingData() {
    *this = ::std::move(from);
  }

  inline SharingData& operator=(const SharingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingData& operator=(SharingData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SharingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SharingData* internal_default_instance() {
    return reinterpret_cast<const SharingData*>(
               &_SharingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SharingData& a, SharingData& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SharingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SharingData* New() const final {
    return CreateMaybeMessage<SharingData>(nullptr);
  }

  SharingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SharingData>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SharingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CitbrainsMessage.SharingData";
  }
  protected:
  explicit SharingData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_infoshare_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOurRobotGlFieldNumber = 12,
    kEnemyRobotGlFieldNumber = 13,
    kBlackPoleGlFieldNumber = 14,
    kTargetPosVecFieldNumber = 15,
    kIdFieldNumber = 1,
    kCfOwnFieldNumber = 2,
    kCfBallFieldNumber = 3,
    kStatusFieldNumber = 4,
    kFpsFieldNumber = 5,
    kVoltageFieldNumber = 6,
    kTemperatureFieldNumber = 7,
    kHighestServoFieldNumber = 8,
    kCommandFieldNumber = 9,
    kCurrentBehaviorNameFieldNumber = 10,
    kIsDetectBallFieldNumber = 11,
  };
  // repeated .CitbrainsMessage.Object our_robot_gl = 12;
  int our_robot_gl_size() const;
  private:
  int _internal_our_robot_gl_size() const;
  public:
  void clear_our_robot_gl();
  ::CitbrainsMessage::Object* mutable_our_robot_gl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >*
      mutable_our_robot_gl();
  private:
  const ::CitbrainsMessage::Object& _internal_our_robot_gl(int index) const;
  ::CitbrainsMessage::Object* _internal_add_our_robot_gl();
  public:
  const ::CitbrainsMessage::Object& our_robot_gl(int index) const;
  ::CitbrainsMessage::Object* add_our_robot_gl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >&
      our_robot_gl() const;

  // repeated .CitbrainsMessage.Object enemy_robot_gl = 13;
  int enemy_robot_gl_size() const;
  private:
  int _internal_enemy_robot_gl_size() const;
  public:
  void clear_enemy_robot_gl();
  ::CitbrainsMessage::Object* mutable_enemy_robot_gl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >*
      mutable_enemy_robot_gl();
  private:
  const ::CitbrainsMessage::Object& _internal_enemy_robot_gl(int index) const;
  ::CitbrainsMessage::Object* _internal_add_enemy_robot_gl();
  public:
  const ::CitbrainsMessage::Object& enemy_robot_gl(int index) const;
  ::CitbrainsMessage::Object* add_enemy_robot_gl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >&
      enemy_robot_gl() const;

  // repeated .CitbrainsMessage.Object black_pole_gl = 14;
  int black_pole_gl_size() const;
  private:
  int _internal_black_pole_gl_size() const;
  public:
  void clear_black_pole_gl();
  ::CitbrainsMessage::Object* mutable_black_pole_gl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >*
      mutable_black_pole_gl();
  private:
  const ::CitbrainsMessage::Object& _internal_black_pole_gl(int index) const;
  ::CitbrainsMessage::Object* _internal_add_black_pole_gl();
  public:
  const ::CitbrainsMessage::Object& black_pole_gl(int index) const;
  ::CitbrainsMessage::Object* add_black_pole_gl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >&
      black_pole_gl() const;

  // repeated .CitbrainsMessage.Object target_pos_vec = 15;
  int target_pos_vec_size() const;
  private:
  int _internal_target_pos_vec_size() const;
  public:
  void clear_target_pos_vec();
  ::CitbrainsMessage::Object* mutable_target_pos_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >*
      mutable_target_pos_vec();
  private:
  const ::CitbrainsMessage::Object& _internal_target_pos_vec(int index) const;
  ::CitbrainsMessage::Object* _internal_add_target_pos_vec();
  public:
  const ::CitbrainsMessage::Object& target_pos_vec(int index) const;
  ::CitbrainsMessage::Object* add_target_pos_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >&
      target_pos_vec() const;

  // optional bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes cf_own = 2;
  bool has_cf_own() const;
  private:
  bool _internal_has_cf_own() const;
  public:
  void clear_cf_own();
  const std::string& cf_own() const;
  void set_cf_own(const std::string& value);
  void set_cf_own(std::string&& value);
  void set_cf_own(const char* value);
  void set_cf_own(const void* value, size_t size);
  std::string* mutable_cf_own();
  std::string* release_cf_own();
  void set_allocated_cf_own(std::string* cf_own);
  private:
  const std::string& _internal_cf_own() const;
  void _internal_set_cf_own(const std::string& value);
  std::string* _internal_mutable_cf_own();
  public:

  // optional bytes cf_ball = 3;
  bool has_cf_ball() const;
  private:
  bool _internal_has_cf_ball() const;
  public:
  void clear_cf_ball();
  const std::string& cf_ball() const;
  void set_cf_ball(const std::string& value);
  void set_cf_ball(std::string&& value);
  void set_cf_ball(const char* value);
  void set_cf_ball(const void* value, size_t size);
  std::string* mutable_cf_ball();
  std::string* release_cf_ball();
  void set_allocated_cf_ball(std::string* cf_ball);
  private:
  const std::string& _internal_cf_ball() const;
  void _internal_set_cf_ball(const std::string& value);
  std::string* _internal_mutable_cf_ball();
  public:

  // optional bytes status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // optional bytes fps = 5;
  bool has_fps() const;
  private:
  bool _internal_has_fps() const;
  public:
  void clear_fps();
  const std::string& fps() const;
  void set_fps(const std::string& value);
  void set_fps(std::string&& value);
  void set_fps(const char* value);
  void set_fps(const void* value, size_t size);
  std::string* mutable_fps();
  std::string* release_fps();
  void set_allocated_fps(std::string* fps);
  private:
  const std::string& _internal_fps() const;
  void _internal_set_fps(const std::string& value);
  std::string* _internal_mutable_fps();
  public:

  // optional bytes voltage = 6;
  bool has_voltage() const;
  private:
  bool _internal_has_voltage() const;
  public:
  void clear_voltage();
  const std::string& voltage() const;
  void set_voltage(const std::string& value);
  void set_voltage(std::string&& value);
  void set_voltage(const char* value);
  void set_voltage(const void* value, size_t size);
  std::string* mutable_voltage();
  std::string* release_voltage();
  void set_allocated_voltage(std::string* voltage);
  private:
  const std::string& _internal_voltage() const;
  void _internal_set_voltage(const std::string& value);
  std::string* _internal_mutable_voltage();
  public:

  // optional bytes temperature = 7;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  const std::string& temperature() const;
  void set_temperature(const std::string& value);
  void set_temperature(std::string&& value);
  void set_temperature(const char* value);
  void set_temperature(const void* value, size_t size);
  std::string* mutable_temperature();
  std::string* release_temperature();
  void set_allocated_temperature(std::string* temperature);
  private:
  const std::string& _internal_temperature() const;
  void _internal_set_temperature(const std::string& value);
  std::string* _internal_mutable_temperature();
  public:

  // optional bytes highest_servo = 8;
  bool has_highest_servo() const;
  private:
  bool _internal_has_highest_servo() const;
  public:
  void clear_highest_servo();
  const std::string& highest_servo() const;
  void set_highest_servo(const std::string& value);
  void set_highest_servo(std::string&& value);
  void set_highest_servo(const char* value);
  void set_highest_servo(const void* value, size_t size);
  std::string* mutable_highest_servo();
  std::string* release_highest_servo();
  void set_allocated_highest_servo(std::string* highest_servo);
  private:
  const std::string& _internal_highest_servo() const;
  void _internal_set_highest_servo(const std::string& value);
  std::string* _internal_mutable_highest_servo();
  public:

  // optional bytes command = 9;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // optional bytes current_behavior_name = 10;
  bool has_current_behavior_name() const;
  private:
  bool _internal_has_current_behavior_name() const;
  public:
  void clear_current_behavior_name();
  const std::string& current_behavior_name() const;
  void set_current_behavior_name(const std::string& value);
  void set_current_behavior_name(std::string&& value);
  void set_current_behavior_name(const char* value);
  void set_current_behavior_name(const void* value, size_t size);
  std::string* mutable_current_behavior_name();
  std::string* release_current_behavior_name();
  void set_allocated_current_behavior_name(std::string* current_behavior_name);
  private:
  const std::string& _internal_current_behavior_name() const;
  void _internal_set_current_behavior_name(const std::string& value);
  std::string* _internal_mutable_current_behavior_name();
  public:

  // optional bool is_detect_ball = 11;
  bool has_is_detect_ball() const;
  private:
  bool _internal_has_is_detect_ball() const;
  public:
  void clear_is_detect_ball();
  bool is_detect_ball() const;
  void set_is_detect_ball(bool value);
  private:
  bool _internal_is_detect_ball() const;
  void _internal_set_is_detect_ball(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CitbrainsMessage.SharingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object > our_robot_gl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object > enemy_robot_gl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object > black_pole_gl_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object > target_pos_vec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_own_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cf_ball_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voltage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr temperature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr highest_servo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_behavior_name_;
  bool is_detect_ball_;
  friend struct ::TableStruct_infoshare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object

// optional bytes robot_side = 1;
inline bool Object::_internal_has_robot_side() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Object::has_robot_side() const {
  return _internal_has_robot_side();
}
inline void Object::clear_robot_side() {
  robot_side_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Object::robot_side() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.Object.robot_side)
  return _internal_robot_side();
}
inline void Object::set_robot_side(const std::string& value) {
  _internal_set_robot_side(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.Object.robot_side)
}
inline std::string* Object::mutable_robot_side() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.Object.robot_side)
  return _internal_mutable_robot_side();
}
inline const std::string& Object::_internal_robot_side() const {
  return robot_side_.Get();
}
inline void Object::_internal_set_robot_side(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  robot_side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_robot_side(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  robot_side_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.Object.robot_side)
}
inline void Object::set_robot_side(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  robot_side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.Object.robot_side)
}
inline void Object::set_robot_side(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  robot_side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.Object.robot_side)
}
inline std::string* Object::_internal_mutable_robot_side() {
  _has_bits_[0] |= 0x00000001u;
  return robot_side_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_robot_side() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.Object.robot_side)
  if (!_internal_has_robot_side()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return robot_side_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_robot_side(std::string* robot_side) {
  if (robot_side != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  robot_side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_side,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.Object.robot_side)
}

// optional sint32 pos_x = 2;
inline bool Object::_internal_has_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Object::has_pos_x() const {
  return _internal_has_pos_x();
}
inline void Object::clear_pos_x() {
  pos_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_pos_x() const {
  return pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::pos_x() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.Object.pos_x)
  return _internal_pos_x();
}
inline void Object::_internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_x_ = value;
}
inline void Object::set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.Object.pos_x)
}

// optional sint32 pos_y = 3;
inline bool Object::_internal_has_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Object::has_pos_y() const {
  return _internal_has_pos_y();
}
inline void Object::clear_pos_y() {
  pos_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_pos_y() const {
  return pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::pos_y() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.Object.pos_y)
  return _internal_pos_y();
}
inline void Object::_internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pos_y_ = value;
}
inline void Object::set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.Object.pos_y)
}

// optional sint32 pos_th = 4;
inline bool Object::_internal_has_pos_th() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Object::has_pos_th() const {
  return _internal_has_pos_th();
}
inline void Object::clear_pos_th() {
  pos_th_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::_internal_pos_th() const {
  return pos_th_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Object::pos_th() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.Object.pos_th)
  return _internal_pos_th();
}
inline void Object::_internal_set_pos_th(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  pos_th_ = value;
}
inline void Object::set_pos_th(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_th(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.Object.pos_th)
}

// optional bytes flags = 5;
inline bool Object::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Object::has_flags() const {
  return _internal_has_flags();
}
inline void Object::clear_flags() {
  flags_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Object::flags() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.Object.flags)
  return _internal_flags();
}
inline void Object::set_flags(const std::string& value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.Object.flags)
}
inline std::string* Object::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.Object.flags)
  return _internal_mutable_flags();
}
inline const std::string& Object::_internal_flags() const {
  return flags_.Get();
}
inline void Object::_internal_set_flags(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Object::set_flags(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  flags_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.Object.flags)
}
inline void Object::set_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.Object.flags)
}
inline void Object::set_flags(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  flags_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.Object.flags)
}
inline std::string* Object::_internal_mutable_flags() {
  _has_bits_[0] |= 0x00000002u;
  return flags_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Object::release_flags() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.Object.flags)
  if (!_internal_has_flags()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return flags_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Object::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  flags_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.Object.flags)
}

// -------------------------------------------------------------------

// SharingData

// optional bytes id = 1;
inline bool SharingData::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SharingData::has_id() const {
  return _internal_has_id();
}
inline void SharingData::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SharingData::id() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.id)
  return _internal_id();
}
inline void SharingData::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.id)
}
inline std::string* SharingData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.id)
  return _internal_mutable_id();
}
inline const std::string& SharingData::_internal_id() const {
  return id_.Get();
}
inline void SharingData::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.id)
}
inline void SharingData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.id)
}
inline void SharingData::set_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.id)
}
inline std::string* SharingData::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_id() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.id)
}

// optional bytes cf_own = 2;
inline bool SharingData::_internal_has_cf_own() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SharingData::has_cf_own() const {
  return _internal_has_cf_own();
}
inline void SharingData::clear_cf_own() {
  cf_own_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SharingData::cf_own() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.cf_own)
  return _internal_cf_own();
}
inline void SharingData::set_cf_own(const std::string& value) {
  _internal_set_cf_own(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.cf_own)
}
inline std::string* SharingData::mutable_cf_own() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.cf_own)
  return _internal_mutable_cf_own();
}
inline const std::string& SharingData::_internal_cf_own() const {
  return cf_own_.Get();
}
inline void SharingData::_internal_set_cf_own(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cf_own_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_cf_own(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cf_own_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.cf_own)
}
inline void SharingData::set_cf_own(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cf_own_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.cf_own)
}
inline void SharingData::set_cf_own(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cf_own_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.cf_own)
}
inline std::string* SharingData::_internal_mutable_cf_own() {
  _has_bits_[0] |= 0x00000002u;
  return cf_own_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_cf_own() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.cf_own)
  if (!_internal_has_cf_own()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cf_own_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_cf_own(std::string* cf_own) {
  if (cf_own != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cf_own_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf_own,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.cf_own)
}

// optional bytes cf_ball = 3;
inline bool SharingData::_internal_has_cf_ball() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SharingData::has_cf_ball() const {
  return _internal_has_cf_ball();
}
inline void SharingData::clear_cf_ball() {
  cf_ball_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SharingData::cf_ball() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.cf_ball)
  return _internal_cf_ball();
}
inline void SharingData::set_cf_ball(const std::string& value) {
  _internal_set_cf_ball(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.cf_ball)
}
inline std::string* SharingData::mutable_cf_ball() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.cf_ball)
  return _internal_mutable_cf_ball();
}
inline const std::string& SharingData::_internal_cf_ball() const {
  return cf_ball_.Get();
}
inline void SharingData::_internal_set_cf_ball(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cf_ball_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_cf_ball(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cf_ball_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.cf_ball)
}
inline void SharingData::set_cf_ball(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cf_ball_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.cf_ball)
}
inline void SharingData::set_cf_ball(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cf_ball_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.cf_ball)
}
inline std::string* SharingData::_internal_mutable_cf_ball() {
  _has_bits_[0] |= 0x00000004u;
  return cf_ball_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_cf_ball() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.cf_ball)
  if (!_internal_has_cf_ball()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cf_ball_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_cf_ball(std::string* cf_ball) {
  if (cf_ball != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cf_ball_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cf_ball,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.cf_ball)
}

// optional bytes status = 4;
inline bool SharingData::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SharingData::has_status() const {
  return _internal_has_status();
}
inline void SharingData::clear_status() {
  status_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SharingData::status() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.status)
  return _internal_status();
}
inline void SharingData::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.status)
}
inline std::string* SharingData::mutable_status() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.status)
  return _internal_mutable_status();
}
inline const std::string& SharingData::_internal_status() const {
  return status_.Get();
}
inline void SharingData::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_status(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.status)
}
inline void SharingData::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.status)
}
inline void SharingData::set_status(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.status)
}
inline std::string* SharingData::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000008u;
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_status() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return status_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.status)
}

// optional bytes fps = 5;
inline bool SharingData::_internal_has_fps() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SharingData::has_fps() const {
  return _internal_has_fps();
}
inline void SharingData::clear_fps() {
  fps_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SharingData::fps() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.fps)
  return _internal_fps();
}
inline void SharingData::set_fps(const std::string& value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.fps)
}
inline std::string* SharingData::mutable_fps() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.fps)
  return _internal_mutable_fps();
}
inline const std::string& SharingData::_internal_fps() const {
  return fps_.Get();
}
inline void SharingData::_internal_set_fps(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  fps_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_fps(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  fps_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.fps)
}
inline void SharingData::set_fps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  fps_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.fps)
}
inline void SharingData::set_fps(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  fps_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.fps)
}
inline std::string* SharingData::_internal_mutable_fps() {
  _has_bits_[0] |= 0x00000010u;
  return fps_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_fps() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.fps)
  if (!_internal_has_fps()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return fps_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_fps(std::string* fps) {
  if (fps != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  fps_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fps,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.fps)
}

// optional bytes voltage = 6;
inline bool SharingData::_internal_has_voltage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SharingData::has_voltage() const {
  return _internal_has_voltage();
}
inline void SharingData::clear_voltage() {
  voltage_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SharingData::voltage() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.voltage)
  return _internal_voltage();
}
inline void SharingData::set_voltage(const std::string& value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.voltage)
}
inline std::string* SharingData::mutable_voltage() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.voltage)
  return _internal_mutable_voltage();
}
inline const std::string& SharingData::_internal_voltage() const {
  return voltage_.Get();
}
inline void SharingData::_internal_set_voltage(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  voltage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_voltage(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  voltage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.voltage)
}
inline void SharingData::set_voltage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  voltage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.voltage)
}
inline void SharingData::set_voltage(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  voltage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.voltage)
}
inline std::string* SharingData::_internal_mutable_voltage() {
  _has_bits_[0] |= 0x00000020u;
  return voltage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_voltage() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.voltage)
  if (!_internal_has_voltage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return voltage_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_voltage(std::string* voltage) {
  if (voltage != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  voltage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voltage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.voltage)
}

// optional bytes temperature = 7;
inline bool SharingData::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SharingData::has_temperature() const {
  return _internal_has_temperature();
}
inline void SharingData::clear_temperature() {
  temperature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SharingData::temperature() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.temperature)
  return _internal_temperature();
}
inline void SharingData::set_temperature(const std::string& value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.temperature)
}
inline std::string* SharingData::mutable_temperature() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.temperature)
  return _internal_mutable_temperature();
}
inline const std::string& SharingData::_internal_temperature() const {
  return temperature_.Get();
}
inline void SharingData::_internal_set_temperature(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  temperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_temperature(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  temperature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.temperature)
}
inline void SharingData::set_temperature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  temperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.temperature)
}
inline void SharingData::set_temperature(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  temperature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.temperature)
}
inline std::string* SharingData::_internal_mutable_temperature() {
  _has_bits_[0] |= 0x00000040u;
  return temperature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_temperature() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.temperature)
  if (!_internal_has_temperature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return temperature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_temperature(std::string* temperature) {
  if (temperature != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  temperature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), temperature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.temperature)
}

// optional bytes highest_servo = 8;
inline bool SharingData::_internal_has_highest_servo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SharingData::has_highest_servo() const {
  return _internal_has_highest_servo();
}
inline void SharingData::clear_highest_servo() {
  highest_servo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SharingData::highest_servo() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.highest_servo)
  return _internal_highest_servo();
}
inline void SharingData::set_highest_servo(const std::string& value) {
  _internal_set_highest_servo(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.highest_servo)
}
inline std::string* SharingData::mutable_highest_servo() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.highest_servo)
  return _internal_mutable_highest_servo();
}
inline const std::string& SharingData::_internal_highest_servo() const {
  return highest_servo_.Get();
}
inline void SharingData::_internal_set_highest_servo(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  highest_servo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_highest_servo(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  highest_servo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.highest_servo)
}
inline void SharingData::set_highest_servo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  highest_servo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.highest_servo)
}
inline void SharingData::set_highest_servo(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  highest_servo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.highest_servo)
}
inline std::string* SharingData::_internal_mutable_highest_servo() {
  _has_bits_[0] |= 0x00000080u;
  return highest_servo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_highest_servo() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.highest_servo)
  if (!_internal_has_highest_servo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return highest_servo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_highest_servo(std::string* highest_servo) {
  if (highest_servo != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  highest_servo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), highest_servo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.highest_servo)
}

// optional bytes command = 9;
inline bool SharingData::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SharingData::has_command() const {
  return _internal_has_command();
}
inline void SharingData::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& SharingData::command() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.command)
  return _internal_command();
}
inline void SharingData::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.command)
}
inline std::string* SharingData::mutable_command() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.command)
  return _internal_mutable_command();
}
inline const std::string& SharingData::_internal_command() const {
  return command_.Get();
}
inline void SharingData::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_command(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.command)
}
inline void SharingData::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.command)
}
inline void SharingData::set_command(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.command)
}
inline std::string* SharingData::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000100u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_command() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.command)
}

// optional bytes current_behavior_name = 10;
inline bool SharingData::_internal_has_current_behavior_name() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SharingData::has_current_behavior_name() const {
  return _internal_has_current_behavior_name();
}
inline void SharingData::clear_current_behavior_name() {
  current_behavior_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& SharingData::current_behavior_name() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.current_behavior_name)
  return _internal_current_behavior_name();
}
inline void SharingData::set_current_behavior_name(const std::string& value) {
  _internal_set_current_behavior_name(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.current_behavior_name)
}
inline std::string* SharingData::mutable_current_behavior_name() {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.current_behavior_name)
  return _internal_mutable_current_behavior_name();
}
inline const std::string& SharingData::_internal_current_behavior_name() const {
  return current_behavior_name_.Get();
}
inline void SharingData::_internal_set_current_behavior_name(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  current_behavior_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SharingData::set_current_behavior_name(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  current_behavior_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CitbrainsMessage.SharingData.current_behavior_name)
}
inline void SharingData::set_current_behavior_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  current_behavior_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CitbrainsMessage.SharingData.current_behavior_name)
}
inline void SharingData::set_current_behavior_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  current_behavior_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CitbrainsMessage.SharingData.current_behavior_name)
}
inline std::string* SharingData::_internal_mutable_current_behavior_name() {
  _has_bits_[0] |= 0x00000200u;
  return current_behavior_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SharingData::release_current_behavior_name() {
  // @@protoc_insertion_point(field_release:CitbrainsMessage.SharingData.current_behavior_name)
  if (!_internal_has_current_behavior_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return current_behavior_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SharingData::set_allocated_current_behavior_name(std::string* current_behavior_name) {
  if (current_behavior_name != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  current_behavior_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current_behavior_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CitbrainsMessage.SharingData.current_behavior_name)
}

// optional bool is_detect_ball = 11;
inline bool SharingData::_internal_has_is_detect_ball() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SharingData::has_is_detect_ball() const {
  return _internal_has_is_detect_ball();
}
inline void SharingData::clear_is_detect_ball() {
  is_detect_ball_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool SharingData::_internal_is_detect_ball() const {
  return is_detect_ball_;
}
inline bool SharingData::is_detect_ball() const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.is_detect_ball)
  return _internal_is_detect_ball();
}
inline void SharingData::_internal_set_is_detect_ball(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_detect_ball_ = value;
}
inline void SharingData::set_is_detect_ball(bool value) {
  _internal_set_is_detect_ball(value);
  // @@protoc_insertion_point(field_set:CitbrainsMessage.SharingData.is_detect_ball)
}

// repeated .CitbrainsMessage.Object our_robot_gl = 12;
inline int SharingData::_internal_our_robot_gl_size() const {
  return our_robot_gl_.size();
}
inline int SharingData::our_robot_gl_size() const {
  return _internal_our_robot_gl_size();
}
inline void SharingData::clear_our_robot_gl() {
  our_robot_gl_.Clear();
}
inline ::CitbrainsMessage::Object* SharingData::mutable_our_robot_gl(int index) {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.our_robot_gl)
  return our_robot_gl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >*
SharingData::mutable_our_robot_gl() {
  // @@protoc_insertion_point(field_mutable_list:CitbrainsMessage.SharingData.our_robot_gl)
  return &our_robot_gl_;
}
inline const ::CitbrainsMessage::Object& SharingData::_internal_our_robot_gl(int index) const {
  return our_robot_gl_.Get(index);
}
inline const ::CitbrainsMessage::Object& SharingData::our_robot_gl(int index) const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.our_robot_gl)
  return _internal_our_robot_gl(index);
}
inline ::CitbrainsMessage::Object* SharingData::_internal_add_our_robot_gl() {
  return our_robot_gl_.Add();
}
inline ::CitbrainsMessage::Object* SharingData::add_our_robot_gl() {
  // @@protoc_insertion_point(field_add:CitbrainsMessage.SharingData.our_robot_gl)
  return _internal_add_our_robot_gl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >&
SharingData::our_robot_gl() const {
  // @@protoc_insertion_point(field_list:CitbrainsMessage.SharingData.our_robot_gl)
  return our_robot_gl_;
}

// repeated .CitbrainsMessage.Object enemy_robot_gl = 13;
inline int SharingData::_internal_enemy_robot_gl_size() const {
  return enemy_robot_gl_.size();
}
inline int SharingData::enemy_robot_gl_size() const {
  return _internal_enemy_robot_gl_size();
}
inline void SharingData::clear_enemy_robot_gl() {
  enemy_robot_gl_.Clear();
}
inline ::CitbrainsMessage::Object* SharingData::mutable_enemy_robot_gl(int index) {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.enemy_robot_gl)
  return enemy_robot_gl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >*
SharingData::mutable_enemy_robot_gl() {
  // @@protoc_insertion_point(field_mutable_list:CitbrainsMessage.SharingData.enemy_robot_gl)
  return &enemy_robot_gl_;
}
inline const ::CitbrainsMessage::Object& SharingData::_internal_enemy_robot_gl(int index) const {
  return enemy_robot_gl_.Get(index);
}
inline const ::CitbrainsMessage::Object& SharingData::enemy_robot_gl(int index) const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.enemy_robot_gl)
  return _internal_enemy_robot_gl(index);
}
inline ::CitbrainsMessage::Object* SharingData::_internal_add_enemy_robot_gl() {
  return enemy_robot_gl_.Add();
}
inline ::CitbrainsMessage::Object* SharingData::add_enemy_robot_gl() {
  // @@protoc_insertion_point(field_add:CitbrainsMessage.SharingData.enemy_robot_gl)
  return _internal_add_enemy_robot_gl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >&
SharingData::enemy_robot_gl() const {
  // @@protoc_insertion_point(field_list:CitbrainsMessage.SharingData.enemy_robot_gl)
  return enemy_robot_gl_;
}

// repeated .CitbrainsMessage.Object black_pole_gl = 14;
inline int SharingData::_internal_black_pole_gl_size() const {
  return black_pole_gl_.size();
}
inline int SharingData::black_pole_gl_size() const {
  return _internal_black_pole_gl_size();
}
inline void SharingData::clear_black_pole_gl() {
  black_pole_gl_.Clear();
}
inline ::CitbrainsMessage::Object* SharingData::mutable_black_pole_gl(int index) {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.black_pole_gl)
  return black_pole_gl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >*
SharingData::mutable_black_pole_gl() {
  // @@protoc_insertion_point(field_mutable_list:CitbrainsMessage.SharingData.black_pole_gl)
  return &black_pole_gl_;
}
inline const ::CitbrainsMessage::Object& SharingData::_internal_black_pole_gl(int index) const {
  return black_pole_gl_.Get(index);
}
inline const ::CitbrainsMessage::Object& SharingData::black_pole_gl(int index) const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.black_pole_gl)
  return _internal_black_pole_gl(index);
}
inline ::CitbrainsMessage::Object* SharingData::_internal_add_black_pole_gl() {
  return black_pole_gl_.Add();
}
inline ::CitbrainsMessage::Object* SharingData::add_black_pole_gl() {
  // @@protoc_insertion_point(field_add:CitbrainsMessage.SharingData.black_pole_gl)
  return _internal_add_black_pole_gl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >&
SharingData::black_pole_gl() const {
  // @@protoc_insertion_point(field_list:CitbrainsMessage.SharingData.black_pole_gl)
  return black_pole_gl_;
}

// repeated .CitbrainsMessage.Object target_pos_vec = 15;
inline int SharingData::_internal_target_pos_vec_size() const {
  return target_pos_vec_.size();
}
inline int SharingData::target_pos_vec_size() const {
  return _internal_target_pos_vec_size();
}
inline void SharingData::clear_target_pos_vec() {
  target_pos_vec_.Clear();
}
inline ::CitbrainsMessage::Object* SharingData::mutable_target_pos_vec(int index) {
  // @@protoc_insertion_point(field_mutable:CitbrainsMessage.SharingData.target_pos_vec)
  return target_pos_vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >*
SharingData::mutable_target_pos_vec() {
  // @@protoc_insertion_point(field_mutable_list:CitbrainsMessage.SharingData.target_pos_vec)
  return &target_pos_vec_;
}
inline const ::CitbrainsMessage::Object& SharingData::_internal_target_pos_vec(int index) const {
  return target_pos_vec_.Get(index);
}
inline const ::CitbrainsMessage::Object& SharingData::target_pos_vec(int index) const {
  // @@protoc_insertion_point(field_get:CitbrainsMessage.SharingData.target_pos_vec)
  return _internal_target_pos_vec(index);
}
inline ::CitbrainsMessage::Object* SharingData::_internal_add_target_pos_vec() {
  return target_pos_vec_.Add();
}
inline ::CitbrainsMessage::Object* SharingData::add_target_pos_vec() {
  // @@protoc_insertion_point(field_add:CitbrainsMessage.SharingData.target_pos_vec)
  return _internal_add_target_pos_vec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CitbrainsMessage::Object >&
SharingData::target_pos_vec() const {
  // @@protoc_insertion_point(field_list:CitbrainsMessage.SharingData.target_pos_vec)
  return target_pos_vec_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CitbrainsMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_infoshare_2eproto
